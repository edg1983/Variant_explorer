filters_settings <- read_json("Filters_settings.json")
filters_settings <- filters_settings$VARIANTS
var_type <- list()
for (n in names(filters_settings$DEFINITIONS)) {
for (f in names(filters_settings$DEFINITIONS[[n]])) {var_type[[f]] <- n}
}
UI_elements <- list()
for (ctrl_type in names(filters_settings$DEFINITIONS)) {
for (var_name in names(filters_settings$DEFINITIONS[[ctrl_type]])) {
for (ctrl_group in group_def[[var_name]]) {
ctrl_id <- paste0(var_name, "_", ctrl_group)
UI_elements[[ctrl_id]] <- makeControl(
ctrl_type = ctrl_type,
ctrl_id = ctrl_id,
ctrl_value = filters_settings$DEFINITIONS[[ctrl_type]][[var_name]],
var_name = var_name,
df = variants_df,
na_values = na_values)
}
}
}
variants_boxes <- NULL
for (filter_group in names(filters_settings$GROUPS)) {
group_title <- paste0(filter_group, " filters")
group_description <- groupDescription(filter_group, filters_settings$GROUPS[[filter_group]][["definition"]])
group_controls <- list(NULL, NULL, NULL)
for (var_name in filters_settings$GROUPS[[filter_group]][["associated_values"]]) {
ctrl_id <- paste0(var_name, "_", filter_group)
switch (var_type[[var_name]],
numeric_fields = {group_controls[[1]] <- tagList(group_controls[[1]], UI_elements[[ctrl_id]])},
factors_fields = {group_controls[[2]] <- tagList(group_controls[[2]], UI_elements[[ctrl_id]])},
binary_fields = {group_controls[[3]] <- tagList(group_controls[[3]], UI_elements[[ctrl_id]])}
)
}
controls_layout <- ctrlLayout(group_controls)
group_box <- tagList(
box(title = group_title, width = 12, status = "primary", solidHeader = T, collapsible = T,
group_description,
hr(),
controls_layout
)
)
variants_boxes <- tagList(variants_boxes, group_box)
}
var_name
filters_settings <- read_json("Filters_settings.json")
filters_settings <- filters_settings$VARIANTS
var_type <- list()
for (n in names(filters_settings$DEFINITIONS)) {
for (f in names(filters_settings$DEFINITIONS[[n]])) {var_type[[f]] <- n}
}
var_type <- list()
for (n in names(filters_settings$DEFINITIONS)) {
for (f in names(filters_settings$DEFINITIONS[[n]])) {var_type[[f]] <- n}
}
UI_elements <- list()
for (ctrl_type in names(filters_settings$DEFINITIONS)) {
for (var_name in names(filters_settings$DEFINITIONS[[ctrl_type]])) {
for (ctrl_group in group_def[[var_name]]) {
ctrl_id <- paste0(var_name, "_", ctrl_group)
UI_elements[[ctrl_id]] <- makeControl(
ctrl_type = ctrl_type,
ctrl_id = ctrl_id,
ctrl_value = filters_settings$DEFINITIONS[[ctrl_type]][[var_name]],
var_name = var_name,
df = variants_df,
na_values = na_values)
}
}
}
makeControl <- function(ctrl_type, ctrl_id, ctrl_value, var_name, df, na_values, step=0.1) {
switch(ctrl_type,
factors_fields = {
choices <- sort(unique(df[[var_name]]))
names(choices) <- choices
choices <- c("ALL" = "ALL", choices)
ctrl_label <- ctrl_value[1]
input_element <- tagList(selectInput(ns(ctrl_id), ctrl_label, choices = choices, selected = "ALL", multiple = TRUE))
},
numeric_fields = {
ctrl_label <- ctrl_value[1]
min <- limitValue(df[[var_name]], "min", na_values[[var_name]])
max <- limitValue(df[[var_name]], "max", na_values[[var_name]])
value <- limitValue(df[[var_name]], "min", na_values[[var_name]])
input_element <-tagList(sliderInput(ns(ctrl_id), ctrl_label, min = min, max = max, value = value, step = step))
},
binary_fields = {
ctrl_label <- paste0(ctrl_value[2], " ", ctrl_value[1])
input_element <-tagList(checkboxInput(ns(ctrl_id), ctrl_label, value = FALSE))
}
)
return(input_element)
}
limitValue <- function(values, operation, na_value) {
if (!is.null(na_value)) {
switch(operation,
min = { n <- min(values[values != na_value])},
max = { n <- max(values[values != na_value])}
)
} else {
switch(operation,
min = { n <- min(values, na.rm = T)},
max = { n <- max(values, na.rm = T)}
)
}
return(n)
}
UI_elements <- list()
for (ctrl_type in names(filters_settings$DEFINITIONS)) {
for (var_name in names(filters_settings$DEFINITIONS[[ctrl_type]])) {
for (ctrl_group in group_def[[var_name]]) {
ctrl_id <- paste0(var_name, "_", ctrl_group)
UI_elements[[ctrl_id]] <- makeControl(
ctrl_type = ctrl_type,
ctrl_id = ctrl_id,
ctrl_value = filters_settings$DEFINITIONS[[ctrl_type]][[var_name]],
var_name = var_name,
df = variants_df,
na_values = na_values)
}
}
}
variants_boxes <- NULL
for (filter_group in names(filters_settings$GROUPS)) {
group_title <- paste0(filter_group, " filters")
group_description <- groupDescription(filter_group, filters_settings$GROUPS[[filter_group]][["definition"]])
group_controls <- list(NULL, NULL, NULL)
for (var_name in filters_settings$GROUPS[[filter_group]][["associated_values"]]) {
ctrl_id <- paste0(var_name, "_", filter_group)
switch (var_type[[var_name]],
numeric_fields = {group_controls[[1]] <- tagList(group_controls[[1]], UI_elements[[ctrl_id]])},
factors_fields = {group_controls[[2]] <- tagList(group_controls[[2]], UI_elements[[ctrl_id]])},
binary_fields = {group_controls[[3]] <- tagList(group_controls[[3]], UI_elements[[ctrl_id]])}
)
}
controls_layout <- ctrlLayout(group_controls)
group_box <- tagList(
box(title = group_title, width = 12, status = "primary", solidHeader = T, collapsible = T,
group_description,
hr(),
controls_layout
)
)
variants_boxes <- tagList(variants_boxes, group_box)
}
var_name
filters_settings <- read_json("Filters_settings.json")
filters_settings <- filters_settings$VARIANTS
group_def <- list()
for (n in names(filters_settings$GROUPS)) {
for (f in filters_settings$GROUPS[[n]][["associated_values"]]) {group_def[[f]] <- c(group_def[[f]], n)}
}
#Build a var_type variable identifying each variable type
var_type <- list()
for (n in names(filters_settings$DEFINITIONS)) {
for (f in names(filters_settings$DEFINITIONS[[n]])) {var_type[[f]] <- n}
}
UI_elements <- list()
for (ctrl_type in names(filters_settings$DEFINITIONS)) {
for (var_name in names(filters_settings$DEFINITIONS[[ctrl_type]])) {
for (ctrl_group in group_def[[var_name]]) {
ctrl_id <- paste0(var_name, "_", ctrl_group)
UI_elements[[ctrl_id]] <- makeControl(
ctrl_type = ctrl_type,
ctrl_id = ctrl_id,
ctrl_value = filters_settings$DEFINITIONS[[ctrl_type]][[var_name]],
var_name = var_name,
df = variants_df,
na_values = na_values)
}
}
}
variants_boxes <- NULL
for (filter_group in names(filters_settings$GROUPS)) {
group_title <- paste0(filter_group, " filters")
group_description <- groupDescription(filter_group, filters_settings$GROUPS[[filter_group]][["definition"]])
group_controls <- list(NULL, NULL, NULL)
for (var_name in filters_settings$GROUPS[[filter_group]][["associated_values"]]) {
ctrl_id <- paste0(var_name, "_", filter_group)
switch (var_type[[var_name]],
numeric_fields = {group_controls[[1]] <- tagList(group_controls[[1]], UI_elements[[ctrl_id]])},
factors_fields = {group_controls[[2]] <- tagList(group_controls[[2]], UI_elements[[ctrl_id]])},
binary_fields = {group_controls[[3]] <- tagList(group_controls[[3]], UI_elements[[ctrl_id]])}
)
}
controls_layout <- ctrlLayout(group_controls)
group_box <- tagList(
box(title = group_title, width = 12, status = "primary", solidHeader = T, collapsible = T,
group_description,
hr(),
controls_layout
)
)
variants_boxes <- tagList(variants_boxes, group_box)
}
var_name
filters_settings <- read_json("Filters_settings.json")
filters_settings <- filters_settings$VARIANTS
group_def <- list()
for (n in names(filters_settings$GROUPS)) {
for (f in filters_settings$GROUPS[[n]][["associated_values"]]) {group_def[[f]] <- c(group_def[[f]], n)}
}
#Build a var_type variable identifying each variable type
var_type <- list()
for (n in names(filters_settings$DEFINITIONS)) {
for (f in names(filters_settings$DEFINITIONS[[n]])) {var_type[[f]] <- n}
}
#Create all controls and store them
UI_elements <- list()
for (ctrl_type in names(filters_settings$DEFINITIONS)) {
for (var_name in names(filters_settings$DEFINITIONS[[ctrl_type]])) {
for (ctrl_group in group_def[[var_name]]) {
ctrl_id <- paste0(var_name, "_", ctrl_group)
UI_elements[[ctrl_id]] <- makeControl(
ctrl_type = ctrl_type,
ctrl_id = ctrl_id,
ctrl_value = filters_settings$DEFINITIONS[[ctrl_type]][[var_name]],
var_name = var_name,
df = variants_df,
na_values = na_values)
}
}
}
variants_boxes <- NULL
for (filter_group in names(filters_settings$GROUPS)) {
group_title <- paste0(filter_group, " filters")
group_description <- groupDescription(filter_group, filters_settings$GROUPS[[filter_group]][["definition"]])
group_controls <- list(NULL, NULL, NULL)
for (var_name in filters_settings$GROUPS[[filter_group]][["associated_values"]]) {
ctrl_id <- paste0(var_name, "_", filter_group)
switch (var_type[[var_name]],
numeric_fields = {group_controls[[1]] <- tagList(group_controls[[1]], UI_elements[[ctrl_id]])},
factors_fields = {group_controls[[2]] <- tagList(group_controls[[2]], UI_elements[[ctrl_id]])},
binary_fields = {group_controls[[3]] <- tagList(group_controls[[3]], UI_elements[[ctrl_id]])}
)
}
controls_layout <- ctrlLayout(group_controls)
group_box <- tagList(
box(title = group_title, width = 12, status = "primary", solidHeader = T, collapsible = T,
group_description,
hr(),
controls_layout
)
)
variants_boxes <- tagList(variants_boxes, group_box)
}
runApp()
runApp()
filter_group <- "global"
group_controls <- list(NULL, NULL, NULL)
for (var_name in filters_settings$GROUPS[[filter_group]][["associated_values"]]) {
ctrl_id <- paste0(var_name, "_", filter_group)
switch (var_type[[var_name]],
numeric_fields = {group_controls[[1]] <- tagList(group_controls[[1]], UI_elements[[ctrl_id]])},
factors_fields = {group_controls[[2]] <- tagList(group_controls[[2]], UI_elements[[ctrl_id]])},
binary_fields = {group_controls[[3]] <- tagList(group_controls[[3]], UI_elements[[ctrl_id]])}
)
}
str(group_controls)
runApp()
runApp()
sliderid <- gsub("TXTSET_","",n)
runApp()
filtersVariants
runApp()
runApp()
test_list
test_list <- list("v1"=1, "v2"=2, "v3"=3)
test_list[[c("v1","v2")]]
test_list[c("v1","v2")]
runApp()
runApp()
runApp()
setwd("/well/gel/HICF2/ref/RegulatoryRegions/release/v2.0")
NCfile <- gzfile("bed_files/GRCh37_regions.annotated.bed.gz")
NCregs <- read.table(NCfile, sep="\t", header=F,stringsAsFactors = F)
NCregs_sources <- NCregs %>% select(V1,V5,V6) %>% separate_rows(V6, sep=",")
save.image("Regions_analyses.RData")
NCregs_genes <- NCregs %>% group_by(V5) %>% mutate(connected_genes=sum(V9 != ""), close_genes=sum(V9 == "" & V8 <= 25000)) %>% select(V5,connected_genes,close_genes) %>% distinct()
NCregs_genes <- NCregs %>% group_by(V5) %>% mutate(tot_regions=n(), connected_genes=sum(V9 != ""), close_genes=sum(V9 == "" & V8 <= 25000)) %>% select(V5,connected_genes,close_genes) %>% distinct()
NCregs_genes <- NCregs %>% group_by(V5) %>% mutate(tot_regions=n(), connected_genes=sum(V9 != ""), close_genes=sum(V9 == "" & V8 <= 25000)) %>% select(V5,tot_regions,connected_genes,close_genes) %>% distinct()
NCregs_genes$pct_connected <- NCregs_genes$connected_genes / NCregs_genes$tot_regions
NCregs_genes$pct_close <- NCregs_genes$close_genes / NCregs_genes$tot_regions
NCregs_genes <- rbind(NCregs_genes, c("all_regions",
sum(NCregs_genes$tot_regions),
sum(NCregs_genes$connected_genes),
sum(NCregs_genes$close_genes),
sum(NCregs_genes$connected_genes) / sum(NCregs_genes$tot_regions),
sum(NCregs_genes$close_genes) / sum(NCregs_genes$tot_regions)) )
NCregs_genes[nrow(NCregs_genes) + 1, ] <- c("all_regions",
sum(NCregs_genes$tot_regions),
sum(NCregs_genes$connected_genes),
sum(NCregs_genes$close_genes),
sum(NCregs_genes$connected_genes) / sum(NCregs_genes$tot_regions),
sum(NCregs_genes$close_genes) / sum(NCregs_genes$tot_regions))
NCregs_sources <- NCregs %>% select(V1,V5,V6) %>% separate_rows(V6, sep=",")
NCregs_genes <- as.data.frame(NCregs %>% group_by(V5) %>% mutate(tot_regions=n(), connected_genes=sum(V9 != ""), close_genes=sum(V9 == "" & V8 <= 25000)) %>% select(V5,tot_regions,connected_genes,close_genes) %>% distinct())
NCregs_genes$pct_connected <- NCregs_genes$connected_genes / NCregs_genes$tot_regions
NCregs_genes$pct_close <- NCregs_genes$close_genes / NCregs_genes$tot_regions
NCregs_genes[nrow(NCregs_genes) + 1, ] <- c("all_regions",
sum(NCregs_genes$tot_regions),
sum(NCregs_genes$connected_genes),
sum(NCregs_genes$close_genes),
sum(NCregs_genes$connected_genes) / sum(NCregs_genes$tot_regions),
sum(NCregs_genes$close_genes) / sum(NCregs_genes$tot_regions))
View(NCregs_genes)
save.image("Regions_analyses.RData")
ggplot(NCregs_sources, aes(x=V6)) + geom_bar()
ggplot(NCregs_sources, aes(x=V6)) + geom_bar() + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs_sources, aes(x=V6)) + geom_bar() + scale_y_sqrt() + theme(axis.text.x = element_text(angle=45, hjust=1))
NCregs_genes <- gather(NCregs_genes, key="key", value="value", pct_connected:pct_close)
ggplot(NCregs_sources, aes(x=V6, fill=key, y=value)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs_genes, aes(x=V6, fill=key, y=value)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs_genes, aes(x=V5, fill=key, y=value)) + geom_bar(stat="identity") + theme(axis.text.x = element_text(angle=45, hjust=1))
NCregs_genes$value <- as.numeric(NCregs_genes$value)
ggplot(NCregs_genes, aes(x=V5, fill=key, y=value)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1") +
theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs_genes, aes(x=V5, fill=key, y=value)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1") + scale_y_continuous(breaks=seq(0,1,0,1)) +
theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs_genes, aes(x=V5, fill=key, y=value)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1") + scale_y_continuous(breaks=seq(0,1,0.1)) +
theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs_sources, aes(x=V6)) + geom_bar() + scale_y_sqrt() + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs_genes, aes(x=V5, fill=key, y=value)) +
geom_bar(stat="identity") +
scale_fill_brewer(palette="Set1") + scale_y_continuous(breaks=seq(0,1,0.1)) +
theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs, aes(x=V5)) + geom_bar() + scale_y_sqrt() + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs_sources, aes(x=V6, fill=V5)) + geom_bar() + scale_y_sqrt() + scale_fill_brewer(palettte="Set1")
ggplot(NCregs_sources, aes(x=V6, fill=V5)) + geom_bar() + scale_y_sqrt() + scale_fill_brewer(palette="Set1")
ggplot(NCregs_sources, aes(x=V6, fill=V5)) + geom_bar() + scale_y_sqrt() + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(NCregs, aes(x=V1, fill=V5)) + geom_bar() + scale_y_sqrt() + theme(axis.text.x = element_text(angle=45, hjust=1))
setwd("~/github.com/Variant_explorer")
test_list <- list(c("v1","v2"), data.frame(c1=seq(1,3), c2=seq(1,3)))
test_list
test_list[[1]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ns <- NS(id)
id <- "variantsFilters"
ns <- NS(id)
filters_settings <- read_json("Filters_settings.json")
filters_settings <- filters_settings$VARIANTS
group_def <- list()
for (n in names(filters_settings$GROUPS)) {
for (f in filters_settings$GROUPS[[n]][["associated_values"]]) {group_def[[f]] <- c(group_def[[f]], n)}
}
#Build a var_type variable identifying each variable type
var_type <- list()
for (n in names(filters_settings$DEFINITIONS)) {
for (f in names(filters_settings$DEFINITIONS[[n]])) {var_type[[f]] <- n}
}
#Build a var_default variable identifying each variable default value
var_default <- list()
for (n in names(filters_settings$DEFINITIONS)) {
for (f in names(filters_settings$DEFINITIONS[[n]])) {var_default[[f]] <- filters_settings$DEFINITIONS[[n]][[f]][3]}
}
decrypt_datafile = function(inf, pwd) {
#pwd = .rs.askForPassword("Enter password") # asks for pwd in RStudio
k = cyphr::key_sodium(sodium::hash(charToRaw(pwd)))
d = tryCatch({
cyphr::decrypt(readRDS(inf), k)
}, error=function(cond) {
#RV$decrypt_status = "Could not decrypt! pwd wrong?"
#if (file.exists(outf)) { file.remove(outf) }
return(0)
})
return (d)
}
mydata <- decrypt_datafile("encrypted_data/005Kli001.RData.enc", "HICF2_hg38_newdata")
variants_df <- mydata$variants_df
app_settings <- read_json("App_configuration.json")
na_values <- app_settings$fill_na$fill_na_vars
UI_elements <- list()
for (ctrl_type in names(filters_settings$DEFINITIONS)) {
for (var_name in names(filters_settings$DEFINITIONS[[ctrl_type]])) {
for (ctrl_group in group_def[[var_name]]) {
ctrl_id <- paste0(var_name, "_", ctrl_group)
UI_elements[[ctrl_id]] <- makeControl(
ctrl_type = ctrl_type,
ctrl_id = ctrl_id,
ctrl_value = filters_settings$DEFINITIONS[[ctrl_type]][[var_name]],
var_name = var_name,
df = variants_df,
na_values = na_values,
ns=ns)
}
}
}
makeControl <- function(ctrl_type, ctrl_id, ctrl_value, var_name, df, na_values, step=0.001, ns) {
switch(ctrl_type,
factors_fields = {
choices <- sort(unique(df[[var_name]]))
names(choices) <- choices
choices <- c("ALL" = "ALL", choices)
ctrl_label <- ctrl_value[1]
default <- ctrl_value[3]
input_element <- tagList(selectInput(ns(ctrl_id), ctrl_label, choices = choices, selected = default, multiple = TRUE))
},
numeric_fields = {
ctrl_label <- ctrl_value[1]
min <- limitValue(df[[var_name]], "min", na_values[[var_name]])
max <- limitValue(df[[var_name]], "max", na_values[[var_name]])
if (ctrl_value[3] %in% c("min", "max")) {
default <- limitValue(df[[var_name]], ctrl_value[3], na_values[[var_name]])
} else {
default <- ctrl_value[3]
}
input_element <-tagList(
fluidRow(column(9, sliderInput(ns(ctrl_id), ctrl_label, min = min, max = max, value = default, step = step)),
column(3, textInput(ns(paste0("TXTSET_",ctrl_id)),"",placeholder = "value")) )
)
},
binary_fields = {
ctrl_label <- paste0(ctrl_value[2], " ", ctrl_value[1])
default <- as.logical(ctrl_value[3])
input_element <-tagList(checkboxInput(ns(ctrl_id), ctrl_label, value = default))
}
)
return(input_element)
}
UI_elements <- list()
for (ctrl_type in names(filters_settings$DEFINITIONS)) {
for (var_name in names(filters_settings$DEFINITIONS[[ctrl_type]])) {
for (ctrl_group in group_def[[var_name]]) {
ctrl_id <- paste0(var_name, "_", ctrl_group)
UI_elements[[ctrl_id]] <- makeControl(
ctrl_type = ctrl_type,
ctrl_id = ctrl_id,
ctrl_value = filters_settings$DEFINITIONS[[ctrl_type]][[var_name]],
var_name = var_name,
df = variants_df,
na_values = na_values,
ns=ns)
}
}
}
variants_boxes <- NULL
for (filter_group in names(filters_settings$GROUPS)) {
group_title <- paste0(filter_group, " filters")
group_description <- groupDescription(filter_group, filters_settings$GROUPS[[filter_group]][["definition"]])
group_presets <- presetsControl(id = paste0("PRESETS_",filter_group), presets_config = filters_settings$PRESETS[[filter_group]])
group_logic <- selectInput(inputId = paste0("LOGIC_",filter_group), label = "Filters logic:", choices = c("AND", "OR"), selected = "OR", multiple = FALSE)
group_controls <- list(NULL, NULL, NULL)
for (var_name in filters_settings$GROUPS[[filter_group]][["associated_values"]]) {
ctrl_id <- paste0(var_name, "_", filter_group)
switch (var_type[[var_name]],
numeric_fields = {group_controls[[1]] <- tagList(group_controls[[1]], UI_elements[[ctrl_id]])},
factors_fields = {group_controls[[2]] <- tagList(group_controls[[2]], UI_elements[[ctrl_id]])},
binary_fields = {group_controls[[3]] <- tagList(group_controls[[3]], UI_elements[[ctrl_id]])}
)
}
controls_layout <- ctrlLayout(group_controls)
group_box <- tagList(
box(title = group_title, width = 12, status = "primary", solidHeader = T, collapsible = T,
fluidRow(column(6,group_description), column(3, group_logic), column(3, group_presets)),
hr(),
controls_layout
)
)
variants_boxes <- tagList(variants_boxes, group_box)
}
runApp()
mynames <- c("TXT_pippo", "score_missense","score_splice","PRESET_missense")
grep("TXT|PRESET", mynames)
runApp()
runApp()
id <- "variants_filters"
ns <- NS(id)
rm(id)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
