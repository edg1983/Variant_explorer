setwd("~/Softwares/code-server2.1523-vsc1.38.1-linux-x86_64")
system("./code-server --enable-http --port 8080 --host http://129.67.46.148 --auth password")
system("./code-server --help")
system("./code-server --allow-http --port 8080 --host 129.67.46.148 --auth password")
load("~/shiny-server/Exomiser_BRC/results.RData")
sort(unique(results$INHERIT[results$SAMPLE=="004Int001"]))
len(results$rank[results$SAMPLE=="004Int001" & results$INHERIT=="AR"])
length(results$rank[results$SAMPLE=="004Int001" & results$INHERIT=="AR"])
setwd("~/shiny-server/Variant_explorer")
test_df <- data.frame(a=seq(1:100), b=seq(101:200))
library(dplyr)
myfilter <- expression("a < 50")
subset(test_df, eval(myfilter))
eval(myfilter)
myfilter <- expression("a" < 50)
eval(myfilter)
subset(test_df, eval(myfilter))
myfilter <- substitute(expression(mycolumn < myvalue), list(mycolumn="a", myvalue=50))
myfilter
myfilter <- substitute(expression(mycolumn < myvalue), list(mycolumn=a, myvalue=50))
myfilter <- substitute(expression(UQ(mycolumn < myvalue)), list(mycolumn="a", myvalue=50))
myfilter
myfilter <- substitute(UQ(expression(mycolumn < myvalue)), list(mycolumn="a", myvalue=50))
myfilter
myfilter <- substitute(expression(mycolumn < myvalue), list(mycolumn="a", myvalue=50))
myfilter
myfilter <- expression(mycolumn < myvalue)
myfilter
eval(myfilter)
mycolumn <- "a"
myvalue <- 50
eval(myfilter)
eval(UQ(myfilter))
myfilter <- expression(as.symbol(mycolumn) < myvalue)
myfilter
test_df %>% filter(myfilter)
test_df %>% filter(eval(myfilter))
test_df
eval(myfilter)
myfilter
as.symbol("a")
as.symbol(mycolumn)
subset(test_df, eval(myfilter))
myvalue
str(test_df)
test_df %>% filter(UQ(as.symbol(mycolumn)) < myvalue)
test_df %>% filter_("a < 50")
test_df %>% filter(UQ("a < 50"))
test_df %>% filter(UQ("a < 50"))
test_df %>% filter_("a < 50")
test_df %>% filter("a < 50")
test_df %>% filter(!!("a < 50"))
quo("a < 50")
test_df > filter(quo("a < 50"))
test_df > filter(!!!quo("a < 50"))
myfilter <- "a < 50"
test_df > filter(!!!myfilter)
test_df > filter(!!myfilter)
test_df > filter(!!quo("a < 50"))
myfilter <- 50
quote(mycolumn < myfilter)
myexpr <- quote(mycolumn < myfilter)
eval(myexpr)
filter(test_df, eval(myexpr))
myexpr <- quote(as.symbol(mycolumn) < myfilter)
filter(test_df, eval(myexpr))
myexpr
myexpr <- quote(as.name(mycolumn) < myfilter)
filter(test_df, eval(myexpr))
subset(test_df, eval(myexpr))
filter(test_df, myexpr)
filter(test_df, !!!myexpr)
filter(test_df, !!myexpr)
call("filter", quote("a < 50"))
call("filter", quote(mycolumn < myfilter))
myexpr <- call("filter", quote(mycolumn < myfilter))
test_df %>% myexpr
myexpr
test_df %>% myexpr
test_df %>% call("filter", quote(mycolumn < myfilter))
filter(test_df, quote(mycolumn < myfilter))
filter(test_df, quote(as.name(mycolumn) < myfilter))
filter(test_df, as.name(mycolumn) < myfilter)
mycolumn
as.name(mycolumn)
myfilter
filter(test_df, as.name(mycolumn) < myfilter)
filter(test_df, quo(as.name(mycolumn) < myfilter))
filter(test_df, as.name(mycolumn) < myfilter)
quote("a < 50")
quo("a < 50")
!!(as.name(mycolumn))
!(as.name(mycolumn))
(as.name(mycolumn))
mycols <- c("a","b")
myvalues <- c("50","110")
test_df %>% filter(a > 50, b < 110)
test_df <- data.frame(a=seq(1:100), b=seq(101:200))
test_df <- data.frame(a=seq(1:100), b=rep(c("a","b","c","d","e"),20))
test_df <- data.frame(a=seq(1:100), b=rep(c("a","b","c","d","e"),20), stringsAsFactors = F)
myvalues <- list("50",c("a","b"))
mycols <- list("a","b")
myoperators <- list("<", "%in%")
mycols[1]
mycols[[1]]
library(purrr)
fp <- mapply(function(x,y,z) quo((!!(as.name(x))) y !!z), mycols, myoperators, myvalues)
fp <- mapply(function(x,y,z) quo((!!(as.name(x))) !!y !!z), mycols, myoperators, myvalues)
fp <- mapply(function(x,y) quo((!!(as.name(x))) < !!z), mycols, myvalues)
fp <- mapply(function(x,y) quo((!!(as.name(x))) < !!y), mycols, myvalues)
fp
quo((!!(as.name(myvalue))) < myvalue)
quo((!!(as.name(mycolumn))) < myvalue)
myexpr <- quo((!!(as.name(mycolumn))) < myvalue)
filter(test_df, myexpr)
filter(test_df, !!!myexpr)
myexpr <- list(quo((!!(as.name(mycols[[1]]))) < myvalues[[1]]), quo((!!(as.name(mycols[[1]]))) %in% myvalues[[2]])
)
myvalues <- list(50,c("a","b"))
myexpr <- list(quo((!!(as.name(mycols[[1]]))) < myvalues[[1]]), quo((!!(as.name(mycols[[1]]))) %in% myvalues[[2]]))
filter(test_df, !!!myexpr)
myexpr
filter(test_df, unlist(myexpr))
filter(test_df, !!!unlist(myexpr))
myexpr <- c(quo((!!(as.name(mycols[[1]]))) < myvalues[[1]]), quo((!!(as.name(mycols[[1]]))) %in% myvalues[[2]]))
filter(test_df, !!!myexpr)
myexpr
myexpr <- c(quo((!!(as.name(mycols[[1]]))) < myvalues[[1]]), quo((!!(as.name(mycols[[2]]))) %in% myvalues[[2]]))
filter(test_df, !!!myexpr)
myvalues[[3]] <- c("d","e")
myexpr2 <- c(quo((!!(as.name(mycols[[1]]))) > myvalues[[1]]), quo((!!(as.name(mycols[[2]]))) %in% myvalues[[3]]))
filter(test_df, !!!myexpr | !!!myexpr2)
myexpr2
!!(as.name(mycols[[1]]))
(!!(as.name(mycols[[1]])))
myexpr2 <- c(quo((as.name(mycols[[1]]))) > myvalues[[1]]), quo((!!(as.name(mycols[[2]]))) %in% myvalues[[3]]))
myexpr2 <- c(quo((as.name(mycols[[1]])) > myvalues[[1]]), quo((!!(as.name(mycols[[2]]))) %in% myvalues[[3]]))
myexpr2
filter(test_df, !myexpr)
filter(test_df, !!!myexpr)
myexpr <- quo((!!(as.name(mycols[[1]]))) < myvalues[[1]] & (!!(as.name(mycols[[2]]))) %in% myvalues[[2]])
myexpr
filter(test_df, !!myexpr)
myexpr <- quo((!!(as.name(mycols[[1]]))) > myvalues[[1]] & (!!(as.name(mycols[[2]]))) %in% myvalues[[3]])
myexpr <- quo((!!(as.name(mycols[[1]]))) < myvalues[[1]] & (!!(as.name(mycols[[2]]))) %in% myvalues[[2]])
myexpr2 <- quo((!!(as.name(mycols[[1]]))) > myvalues[[1]] & (!!(as.name(mycols[[2]]))) %in% myvalues[[3]])
myexpr
myexpr2
combined_expr <- quo((!!myexpr) | (!!myexpr2))
combined_expr
filter(test_df, !!combined_expr)
controls <- list(x = c("value1"= "a", "value2"="b", "value3" = "c"), y = c("value1"="a", "value2"="b"), fill = c("value1"="a", "value2"="b"))
controls
for (l in controls) {message (l)}
for (l in names(controls)) {message (l)}
library(shiny)
output <- tagList(plotOutput(ns("plot")))
ns <- NS(id)
ns <- NS("id")
output <- tagList(plotOutput(ns("plot")))
output
output <- c(output, tagList(selectInput(ns("test"), v, choices = c("1","2")))
)
output <- c(output, tagList(selectInput(ns("test"), "test", choices = c("1","2"))))
output
output <- tagList(plotOutput(ns("plot")), selectInput(ns("test"), "test", choices = c("1","2"))))
output <- tagList(plotOutput(ns("plot")), selectInput(ns("test"), "test", choices = c("1","2")))
output
output <- tagList(plotOutput(ns("plot")))
output <- tagList(output, selectInput(ns("test"), "test", choices = c("1","2")))
output
fluidRow(column(4,selectInput(ns(v), v, choices = variables[[v]])))
v = "x"
fluidRow(column(4,selectInput(ns(v), v, choices = controls[[v]])))
commands_output <- NULL
commands_output <- fluidRow(commands_output, column(4,selectInput(ns(v), v, choices = controls[[v]])))
commands_output
v = "y"
commands_output <- fluidRow(commands_output, column(4,selectInput(ns(v), v, choices = controls[[v]])))
commands_output
fluidRow(column(4,selectInput(ns("x"), "x", choices = controls[["x"]])), column(4,selectInput(ns("y"), "y", choices = controls[["y"]])))
length(controls)
test_df$c <- seq(501:600)
seq(501:600)
test_df$c <- 501:600
controls <- list(x="a", y="c", color="b")
quote(as.name("x") = "a", as.name("y") = "c", as.names("color")="b")
quo(as.name("x") = "a", as.name("y") = "c", as.names("color")="b")
quo((as.name("x")) = "a", as.name("y") = "c", as.names("color")="b")
ggplot(test_df, aes_string(as.name("x") = "a", as.name("y") = "c", as.names("color")="b")) + geom_point()
as.name(x)
as.name("x")
ggplot(test_df, aes_string(as.name("x") = "a", as.name("y") = "c", as.names("color")="b")) + geom_point()
library(ggplot2)
ggplot(test_df, aes_string(as.name("x") = "a", as.name("y") = "c", as.names("color")="b")) + geom_point()
quote("x" = "a")
quote(names(controls)[1] = controls[[names(controls)[1]]])
quote(paste0(names(controls)[1], "=", controls[[names(controls)[1]]]))
quote(!!paste0(names(controls)[1], "=", controls[[names(controls)[1]]]))
quote(!!(paste0(names(controls)[1], "=", controls[[names(controls)[1]]])))
quote(!!!(paste0(names(controls)[1], "=", controls[[names(controls)[1]]])))
var1 <- paste0(names(controls)[1], "=", controls[[names(controls)[1]]]))
var1 <- paste0(names(controls)[1], "=", controls[[names(controls)[1]]])
quote(var1)
quote(!!var1)
expr(as.name("x") = "a")
expr(var1)
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], fill=controls[["fill"]])) + geom_point()
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) + geom_point()
quote(x := a)
quote(x := a, y:= b)
quotes(x := a, y:= b)
quote(x := a, y:= b)
ggplot(test_df, aes_q(quote(x := a), quote(y:=b))) + geom_point()
plotOptions <- list(size=1)
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) + geom_point(size=plotOptions[["size"]])
plotOptions <- list(size=5)
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) + geom_point(size=plotOptions[["size"]])
plotOptions <- list(scale="width")
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) + geom_point(size=plotOptions[["size"]])
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) + geom_point()
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) + geom_point(size=ifelse(plotOptions[["size"]],plotOptions[["size"]],1))
plotOptions[["size"]]
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) + geom_point(size=ifelse(is.null(plotOptions[["size"]]),1,plotOptions[["size"]]))
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) + geom_point(size=ifelse(is.null(plotOptions[["size"]]),2,plotOptions[["size"]]))
p <- geom_point(size = ifelse(is.null(plotOptions[["size"]]),2,plotOptions[["size"]]))
additionalOptions <- NULL
ggplot(data, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) +
p +
additionalOptions
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) +
p +
additionalOptions
additionalOptions <- facet_wrap(~c)
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) +
p +
additionalOptions
additionalOptions <- facet_wrap(~b)
ggplot(test_df, aes_string(x = controls[["x"]], y = controls[["y"]], color= controls[["color"]], size=controls[["size"]], fill=controls[["fill"]], shape=controls[["shape"]])) +
p +
additionalOptions
runApp()
controls <- list(x="DANN_DANN", y="MaxPopAF", color="Class", label="Gene")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
test_1 <- list("a"=1,"b"=2)
test_2 <- list("c"=3,"d"=4)
test_3 <- c(test_1, test_2)
test_3
str(test_3)
test_2 <- list("a"=3,"d"=4)
test_3 <- c(test_1, test_2)
test_3
test_3[["a"]]
names(test_3)
list("x"=variants_axes_options,"y"=variants_axes_options)
variants_axes_options <- c("Maximum population AF"= "MaxPopAF",
"d score"= "d_score",
"CADD phred"= "CADD_PhredScore",
"DANN score"= "DANN_DANN",
"ReMM score" = "ReMM_score",
"SpliceAI score" = "SpliceAI_SpliceAI_max",
"dbscSNV splice score" = "dbscSNV_ada")
list("x"=variants_axes_options,"y"=variants_axes_options)
runApp()
runApp()
commands_output <- column(3,selectInput(ns("x"), "x", choices=controls[["x"]]))
commands_output <- c(commands_output, column(3,selectInput(ns("y"), "y", choices=controls[["y"]])))
commnads_output <- fluidRow(commands_output)
commands_output
runApp()
commands_output <- tagList(column(3,selectInput(ns("x"), "x", choices=controls[["x"]])))
commands_output <- tagList(commands_output, column(3,selectInput(ns("y"), "y", choices=controls[["y"]])))
commands_output <- tagList(fluidRow(commands_output))
commands_output
output <- tagList(commands_output, plot_output)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
str(controls)
control[["size"]]
controls[["size"]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(shinyalert)
install.packages("shinyalert")
library(shinyalert)
runApp()
output_data <- list("genes.tsv"="pippo", "customGenes.tsv"="pluto")
inherits(output_data, "list")
runApp()
runApp()
runApp()
runApp()
runApp()
