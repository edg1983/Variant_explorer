matrix(sample(variants_df$ID, 1000), ncol=2)
data.frame(sample(variants_df$ID, 1000), ncol=2)
as.data.frame(matrix(sample(variants_df$ID, 1000), ncol=2))
comphet_df <- as.data.frame(matrix(sample(variants_df$ID, 1000), ncol=2))
sample(0:3, 500)
sample(0:3, 500, replace=TRUE)
comphet$comphet <- sample(0:3, 500, replace=TRUE)
comphet_df$comphet <- sample(0:3, 500, replace=TRUE)
colnames(comphet_df) <- c("var1","var2","comphet")
write.table(comphet_df, file="var2reg/V2.004Int001.var2reg.comphet.tsv", sep="\t", row.names=F, quote=F)
variants_df$recessive_var <- NA
View(variants_df)
variants_df$recessive_var <- 0
variants_df$recessive_var <- NA
variants_df$recessive_var[variants_df$recessive > 0] <- variants_df$ID[variants_df$recessive > 0]
variants_df$denovo_var <- NA
variants_df$denovo_var[variants_df$deNovo > 0] <- variants_df$ID[variants_df$deNovo > 0]
variants_df$dominant_var <- NA
variants_df$dominant_var[variants_df$dominant > 0] <- variants_df$ID[variants_df$dominant > 0]
variants_df$other_var <- NA
variants_df$other_var[variants_df$dominant == 0 & variants_df$recessive == 0 & variants_df$deNovo == 0] <- variants_df$ID[variants_df$dominant == 0 & variants_df$recessive == 0 & variants_df$deNovo == 0]
variants_df1 <- variants_df[,c(2,51:54)]
View(variants_df1)
colnames(variants_df1) <- c("recessive","denovo","dominant","other")
colnames(variants_df1) <- c("gene","recessive","denovo","dominant","other")
variants_df1 <- gather(variants_df1, recessive:other)
variants_df1 <- gather(variants_df1, key="inh_model", value="varID", recessive:other)
variants_df1 %>% group_by(gene,inh_model) %>% mutate(count=n())
variants_df1 %>% group_by(gene,inh_model) %>% mutate(vars=paste(varID, collapse=",")) %>% select(gene,inhmodel,vars) %>% distinct()
variants_df1 %>% group_by(gene,inh_model) %>% mutate(vars=paste(varID, collapse=",")) %>% select(gene,inh_model,vars) %>% distinct()
variants_df1 %>% group_by(gene,inh_model) %>% mutate(vars=paste(varID, collapse=",", na.exclude=T)) %>% select(gene,inh_model,vars) %>% distinct()
variants_df1 %>% group_by(gene,inh_model) %>% filter(!is.na(varID)) %>% mutate(vars=paste(varID, collapse=",")) %>% select(gene,inh_model,vars) %>% distinct()
variants_df1 <- as.data.frame(variants_df1 %>% group_by(gene,inh_model) %>% filter(!is.na(varID)) %>% mutate(vars=paste(varID, collapse=",")) %>% select(gene,inh_model,vars) %>% distinct())
View(variants_df1)
View(genes_df)
genes_file <- gzfile("example_data/V2.004Int001.var2reg.genes.updated.tsv.gz")
genes_df <- read.table(genes_file, header=T, sep="\t",stringsAsFactors = F)
variants_df1 <- merge(variants_df1, genes_df[,c("Gene","Exomiser_GenePhenoScore","GDI_phred","GDI_score","pLI_gnomAD")], by.x="gene", by.y="Gene")
View(variants_df1)
genes <- sample(variants_df1$gene,200)
comphet_vars <- sample(paste("comphet",seq(1:501),sep="_"), 200)
comphet_df <- data.frame(gene=genes, inh_model="comphet", vars=comphet_vars, stringsAsFactors = F)
comphet_df <- merge(comphet_df, variants_df1, by="gene")
comphet_df <- data.frame(gene=genes, inh_model="comphet", vars=comphet_vars, stringsAsFactors = F)
comphet_df <- merge(comphet_df, variants_df1[,c("gene","Exomiser_GenePhenoScore","GDI_phred","GDI_score","pLI_gnomAD")], by="gene")
comphet <- as.data.frame(comphet %>% distinct())
comphet_df <- as.data.frame(comphet_df %>% distinct())
variants_df1 <- rbind(variants_df1, comphet_df)
write.table(variants_df1, file="example_data/V2.004Int001.var2reg.genes.tsv", sep="\t",row.names=F, quote=F)
variants_df1 <- merge(variants_df1, genes_df[, c("Gene","Gado_zscore")], by.x="gene", by.y="Gene")
variants_df1 <- as.data.frame(variants_df1 %>% distinct())
write.table(variants_df1, file="example_data/V2.004Int001.var2reg.genes.tsv", sep="\t",row.names=F, quote=F)
genes <- sample(variants_df1$gene,500)
comphet_vars <- sample(paste("comphet",seq(2:501),sep="_"), 500, replace = FALSE)
comphet_df <- data.frame(gene=genes, inh_model="comphet", vars=comphet_vars, stringsAsFactors = F)
comphet_df <- as.data.frame(comphet_df %>% distinct())
comphet_df <- merge(comphet_df, variants_df1[,c("gene","Exomiser_GenePhenoScore","GDI_phred","GDI_score","pLI_gnomAD","Gado_zscore")], by="gene")
comphet_df <- as.data.frame(comphet_df %>% distinct())
variants_df1 <- rbind(variants_df1[inh_model != "comphet",], comphet_df)
variants_df1 <- rbind(variants_df1[variants_df1$inh_model != "comphet",], comphet_df)
variants_df1 <- as.data.frame(variants_df1 %>% distinct())
write.table(variants_df1, file="example_data/V2.004Int001.var2reg.genes.tsv", sep="\t",row.names=F, quote=F)
comphet_combos <- read.table("example_data/V2.004Int001.var2reg.comphet.tsv", header=T,sep="\t",stringsAsFactors = F)
comphet_combos <- read.table("example_data/V2.004Int001.var2reg.comphet.tsv", header=T,sep="\t",stringsAsFactors = F)
comphet_combos <- merge(comphet_combos, comphet_df[,c("gene","vars")], by.x="ID", by.y="vars", all.x=T)
comphet_combos <- as.data.frame(comphet_combos %>% distinct())
write.table(comphet_combos, file = "example_data/V2.004Int001.var2reg.comphet.tsv", sep="\t", row.names=T, quote=F)
write.table(comphet_combos, file = "example_data/V2.004Int001.var2reg.comphet.tsv", sep="\t", row.names=F, quote=F)
comphet_combos %>% filter(Gene == gene_name) %>% gather(key="Variant",value = "varID", var1:var2)
comphet_combos %>% filter(gene == gene_name) %>% gather(key="Variant",value = "varID", var1:var2)
gene_name = "PPP1R7"
comphet_combos %>% filter(gene == gene_name) %>% gather(key="Variant",value = "varID", var1:var2)
comphet_combos %>% filter(gene == gene_name) %>% select(var1)
str(comphet_combos %>% filter(gene == gene_name) %>% select(var1))
as.vector(comphet_combos %>% filter(gene == gene_name) %>% select(var1))
as.character(comphet_combos %>% filter(gene == gene_name) %>% select(var1))
as.character(genes_df %>% filter(gene == gene_name) %>% select(GDI_score))
as.character(genes_df %>% filter(Gene == gene_name) %>% select(GDI_score))
as.character(variants_df %>% filter(Gene == gene_name) %>% select(GDI_score))
variants_df %>% filter(Gene == gene_name) %>% select(GDI_score))
variants_df %>% filter(Gene == gene_name) %>% select(GDI_score)
test_list <- variants_df %>% filter(Gene == gene_name) %>% select(GDI_score))
test_list <- variants_df %>% filter(Gene == gene_name) %>% select(GDI_score)
test_list$ID
test_list
test_list$GDI_score
runApp()
runApp()
runApp()
runApp()
data_dir <- "example_data"
files <- list.files(data_dir, pattern = "*.vars.tsv.gz")
samplesID <- gsub("V2\\.|\\.var2reg.vars.tsv.gz","",files)
samplesID
genes_file <- gzfile(paste0(data_dir, "/", paste0("V2.",samplesID[1],".var2reg.genes.tsv.gz")))
genes_df <- read.table(genes_file, header=T, sep="\t", stringsAsFactors = F)
genes_df <- as.data.frame(RV$genes_df %>% separate_rows(Variants))
genes_df <- as.data.frame(genes_df %>% separate_rows(Variants))
View(genes_df)
gene_df %>% select(Gene,inh_model) %>% distinct()
runApp()
runApp()
runApp()
runApp()
total_affected <- 3
values_segregation <- c(total_affected+1,seq(1:total_affected))
values_segregation
names(values_segregation) <- c("NOT_ACCEPTED", seq(1:total_affected))
values_segregation
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
segregation_file <- gzfile(paste0(data_dir, "/", paste0("V2.",input$CaseCode,".var2reg.segregation.tsv.gz")))
segregation_file <- gzfile(paste0(data_dir, "/", paste0("V2.",samplesID[1],".var2reg.segregation.tsv.gz")))
RV$segregation_df <- read.table(segregation_file, header=T, sep="\t", stringsAsFactors=F)
segregation_df <- read.table(segregation_file, header=T, sep="\t", stringsAsFactors=F)
segregation_file <- gzfile(paste0(data_dir, "/", paste0("V2.",samplesID[1],".var2reg.segregation.tsv.gz")))
segregation_df <- read.table(segregation_file, header=T, sep="\t", stringsAsFactors=F)
segregating_vars_list <- segregation_df %>% filter(
recessive >= 3 |
dominant >= 4 |
deNovo >= 4 |
comphet >= 3) %>% select(ID)
segregating_vars_list
segregating_vars_list <- segregating_vars_list$ID
segregating_vars_list
runApp()
variants_file <- gzfile(paste0(data_dir, "/", paste0("V2.",samplesID[1],".var2reg.vars.tsv.gz")))
variants_df <- read.table(variants_file, header=T, sep="\t", stringsAsFactors = F)
variants_df$MaxPopAF[is.na(variants_df$MaxPopAF)] <- 0
variants_df$cohortAF[is.na(variants_df$cohortAF)] <- 0
filtered_vars <- as.data.frame(RV$variants_df %>% filter(
ID %in% segregating_vars_list,
d_score >= 0.2,
Consequence %in% accepted_consequence,
MaxPopAF <= 0.005,
cohortAF <= 0.05,
((Reg_type == "splicing" & SpliceAI_SpliceAI_max >= 0.2) | Reg_type != "splicing")))
accepted_consequence <- unique(variants_df$Consequence)
filtered_vars <- as.data.frame(variants_df %>% filter(
ID %in% segregating_vars_list,
d_score >= 0.2,
Consequence %in% accepted_consequence,
MaxPopAF <= 0.005,
cohortAF <= 0.05,
((Reg_type == "splicing" & SpliceAI_SpliceAI_max >= 0.2) | Reg_type != "splicing")))
comphet_file <- gzfile(paste0(data_dir, "/", paste0("V2.",samplesID[1],".var2reg.comphet.tsv.gz")))
comphet_df <- read.table(comphet_file, header=T, sep="\t", stringsAsFactors=F)
filtered_comphet <- RV$comphet_df[comphet_df$var1 %in% RV$filtered_vars$ID &
RV$comphet_df$var2 %in% RV$filtered_vars$ID &
RV$comphet_df$ID %in% segregating_vars_list,]
filtered_comphet <- comphet_df[comphet_df$var1 %in% RV$filtered_vars$ID &
RV$comphet_df$var2 %in% RV$filtered_vars$ID &
RV$comphet_df$ID %in% segregating_vars_list,]
filtered_comphet <- comphet_df[comphet_df$var1 %in% filtered_vars$ID &
comphet_df$var2 %in% filtered_vars$ID &
comphet_df$ID %in% segregating_vars_list,]
filtered_vars_list <- unique(c(RV$filtered_vars$ID, RV$filtered_comphet$ID))
filtered_vars_list <- unique(c(filtered_vars$ID, filtered_comphet$ID))
genes_file <- gzfile(paste0(data_dir, "/", paste0("V2.",samplesID[1],".var2reg.genes.tsv.gz")))
genes_df <- read.table(genes_file, header=T, sep="\t", stringsAsFactors = F)
genes_df <- as.data.frame(genes_df %>% separate_rows(Variants))
filtered_genes <- genes_df[genes_df$Variants %in% filtered_vars_list,]
filtered_gene_scores <- as.data.frame(filtered_genes %>% select(Gene,Gado_zscore,GDI_phred,pLI_gnomAD) %>% distinct() %>% mutate(class="filtered"))
gene_scores <- as.data.frame(genes_df %>% select(Gene,Gado_zscore,GDI_phred,pLI_gnomAD) %>% distinct() %>% mutate(class="ALL"))
filtered_gene_scores <- rbind(gene_scores, filtered_gene_scores)
ggplot(filtered_gene_scores, aes(x=Gado_zscore, fill=class)) + geom_histogram(bins=100) + scale_fill_brewer() + scale_y_sqrt()
runApp()
var_types <- sort(unique(variants_df$Consequence))
var_types
names(var_types) <- sort(unique(RV$variants_df$Consequence))
names(var_types) <- sort(unique(variants_df$Consequence))
var_types
var_types <- c("ALL" = sort(unique(RV$variants_df$Consequence)), var_types)
var_types <- c("ALL" = sort(unique(variants_df$Consequence)), var_types)
var_types
runApp()
runApp()
runApp()
filtered_vars <- as.data.frame(variants_df %>% filter(
ID %in% segregating_vars_list,
d_score >= 0.2,
Consequence %in% accepted_consequence,
MaxPopAF <= 0.005,
cohortAF <= 0.05,
((Reg_type == "splicing" & SpliceAI_SpliceAI_max >= 0.2) | Reg_type != "splicing")) %>% mutate(class="PASS"))
filtered_vars <- as.data.frame(variants_df %>% mutate( class = ifelse(
ID %in% segregating_vars_list &
d_score >= 0.2 &
Consequence %in% accepted_consequence &
MaxPopAF <= 0.005 &
cohortAF <= 0.05 &
((Reg_type == "splicing" & SpliceAI_SpliceAI_max >= 0.2) | Reg_type != "splicing")), "PASS","FILTER")
)
filtered_vars <- as.data.frame(variants_df %>% mutate( class = ifelse(
ID %in% segregating_vars_list &
d_score >= 0.2 &
Consequence %in% accepted_consequence &
MaxPopAF <= 0.005 &
cohortAF <= 0.05 &
((Reg_type == "splicing" & SpliceAI_SpliceAI_max >= 0.2) | Reg_type != "splicing"), "PASS","FILTER")))
View(filtered_vars)
genes_scores$Class[1:5] <- "PASS"
gene_scores$Class[1:5] <- "PASS"
gene_scores %>% filter(Class == "PASS") %>% slice(2)
gene_scores$class[1:5] <- "PASS"
gene_scores %>% filter(Class == "PASS") %>% slice(2)
gene_scores %>% filter(Class == "PASS")
gene_scores %>% filter(class == "PASS")
gene_scores %>% filter(class == "PASS") %>% slice(2)
gene_scores %>% filter(class == "PASS") %>% slice(2L)
str(gene_scores)
gene_scores %>% slice(2L)
detach("package:IRanges", unload = TRUE)
detach("package:GenomicRanges", unload = TRUE)
detach("package:IRanges", unload = TRUE)
detach("package:GenomeInfoDb", unload = TRUE)
detach("package:IRanges", unload = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
segregating_vars_list
runApp()
runApp()
as.data.frame(all_peds)
all_peds
unlist(all_peds)
as.data.frame(unlist(all_peds))
all_peds.id
all_peds.ids
all_peds["*"]
all_peds[]
all_peds[all]
names(all_peds)
all_peds@famid
all_peds$famid
all_peds_df <- data.frame(famid = all_peds$famid, iid=all_peds$id, father_id=all_peds$findex, mother_id=all_peds$mindex, sex=all_peds$sex, status=all_peds$affected)
head(all_peds_df)
View(all_peds_df)
GO_file <- "c5.all.v7.0.symbols.gmt"
pathways <- list()
con  <- file(GO_file, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myvector <- (strsplit(oneLine, "\t"))
GO[[myvector[[1]][1]]] <- myvector[[1]][3:length(myvector[[1]])][myvector[[1]][3:length(myvector[[1]])] != ""]
}
close(con)
GO_file <- "c5.all.v7.0.symbols.gmt"
GO <- list()
con  <- file(GO_file, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myvector <- (strsplit(oneLine, "\t"))
GO[[myvector[[1]][1]]] <- myvector[[1]][3:length(myvector[[1]])][myvector[[1]][3:length(myvector[[1]])] != ""]
}
close(con)
str(GO)
GO_file <- "c5.bp.v7.0.symbols.gmt"
GO_bp <- list()
con  <- file(GO_file, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myvector <- (strsplit(oneLine, "\t"))
GO_bp[[myvector[[1]][1]]] <- myvector[[1]][3:length(myvector[[1]])][myvector[[1]][3:length(myvector[[1]])] != ""]
}
close(con)
GO_file <- "c5.cc.v7.0.symbols.gmt"
GO_cc <- list()
con  <- file(GO_file, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myvector <- (strsplit(oneLine, "\t"))
GO_cc[[myvector[[1]][1]]] <- myvector[[1]][3:length(myvector[[1]])][myvector[[1]][3:length(myvector[[1]])] != ""]
}
close(con)
GO_file <- "c5.mf.v7.0.symbols.gmt"
GO_mf <- list()
con  <- file(GO_file, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myvector <- (strsplit(oneLine, "\t"))
GO_mf[[myvector[[1]][1]]] <- myvector[[1]][3:length(myvector[[1]])][myvector[[1]][3:length(myvector[[1]])] != ""]
}
close(con)
pathway_file <- "c2.bp.v7.0.symbols.gmt"
pathways <- list()
con  <- file(pathway_file, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myvector <- (strsplit(oneLine, "\t"))
pathways[[myvector[[1]][1]]] <- myvector[[1]][3:length(myvector[[1]])][myvector[[1]][3:length(myvector[[1]])] != ""]
}
close(con)
pathway_file <- "c2.cp.v7.0.symbols.gmt"
pathways <- list()
con  <- file(pathway_file, open = "r")
while (length(oneLine <- readLines(con, n = 1, warn = FALSE)) > 0) {
myvector <- (strsplit(oneLine, "\t"))
pathways[[myvector[[1]][1]]] <- myvector[[1]][3:length(myvector[[1]])][myvector[[1]][3:length(myvector[[1]])] != ""]
}
close(con)
pathways
grep("MCM2", pathways)
path_list <- grep("MCM2", pathways)
pathways[path_list]
names(pathways)[path_list]
gene_name <- "MCM2"
pathways_list <- grep(gene_name, pathways)
selected_pathways <- names(pathways)[pathways_list]
GO_bp_list <- grep(gene_name, GO_bp)
selected_GObp <- names(GO_bp)[GO_bp_list]
GO_mf_list <- grep(gene_name, GO_mf)
selected_GOmf <- names(GO_mf)[GO_mf_list]
GO_cc_list <- grep(gene_name, GO_cc)
selected_GOcc <- names(GO_cc)[GO_cc_list]
Additional_info <- data.frame(Pathways=selected_pathways, GO_BP=selected_GObp, GO_MF=selected_GOmf, GO_CC=selected_GOcc)
Additional_info <- data.frame(matrix(unlist(selected), nrow=length(l), byrow=T),stringsAsFactors=FALSE)
selected <- list()
pathways_list <- grep(gene_name, pathways)
selected["pathways"] <- names(pathways)[pathways_list]
GO_bp_list <- grep(gene_name, GO_bp)
selected["GO_BP"] <- names(GO_bp)[GO_bp_list]
GO_mf_list <- grep(gene_name, GO_mf)
selected["GO_MF"] <- names(GO_mf)[GO_mf_list]
GO_cc_list <- grep(gene_name, GO_cc)
selected["GO_CC"] <- names(GO_cc)[GO_cc_list]
selected <- list()
pathways_list <- grep(gene_name, pathways)
selected[["pathways"]] <- names(pathways)[pathways_list]
GO_bp_list <- grep(gene_name, GO_bp)
selected[["GO_BP"]] <- names(GO_bp)[GO_bp_list]
GO_mf_list <- grep(gene_name, GO_mf)
selected[["GO_MF"]] <- names(GO_mf)[GO_mf_list]
GO_cc_list <- grep(gene_name, GO_cc)
selected[["GO_CC"]] <- names(GO_cc)[GO_cc_list]
Additional_info <- data.frame(matrix(unlist(selected), nrow=length(l), byrow=T),stringsAsFactors=FALSE)
Additional_info <- data.frame(matrix(unlist(selected), nrow=length(selected), byrow=T),stringsAsFactors=FALSE)
Additional_info <- data.frame(matrix(unlist(selected), nrow=length(selected), bycolumn=T),stringsAsFactors=FALSE)
Additional_info <- data.frame(matrix(unlist(selected), nrow=length(selected)),stringsAsFactors=FALSE)
Additional_info <- data.frame(lapply(selected, "length<-", max(lengths(selected))))
Additional_info <- data.frame(lapply(selected, "length<-", max(lengths(selected))), stringsAsFactors = F)
genes_info_file <- "hgnc_complete_set.txt"
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F)
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, fill=NA)
View(genes_info)
runApp()
runApp()
runApp()
runApp()
runApp()
genes_info[genes_info$symbol == "KMTC2",]
genes_info[genes_info$symbol == "KMT2C",]
genes_info$symbol
grep("KMT2C", genes_info$symbol)
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F)
genes_info_file <- "hgnc_complete_set.simple.txt"
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F)
genes_info_file <- "hgnc_complete_set.simple.txt"
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F)
genes_info_file <- "hgnc_complete_set.simple.txt"
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F)
genes_info_file <- "hgnc_complete_set.txt"
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, encoding = "UTF-8")
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, encoding = "ISO-8859")
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, encoding = "iso-8859-1")
genes_info_file <- "hgnc_complete_set.simple.txt"
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, encoding = "iso-8859-1")
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F)
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, fill=NA)
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, fill=NA, fileEncoding = "UTF-8")
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, fileEncoding = "UTF-8")
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, fileEncoding = "ISO-8859")
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, fileEncoding = "ISO-8859-1")
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F,as.is = T)
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, fill = TRUE)
View(genes_info)
genes_info_file <- "hgnc_complete_set.txt"
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F)
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, fill=TRUE)
genes_info[genes_info$symbol == "KMT2C",]
View(genes_info)
genes_info_file <- "hgnc_complete_set.txt"
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F, fill=TRUE)
genes_info <- read.table(genes_info_file, header=T, sep="\t", stringsAsFactors = F)
genes_info[genes_info$symbol == "KMT2C",]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
load("~/shiny-server/Variant_Explorer/Peds_and_HPOs.RData")
load("~/shiny-server/Variant_Explorer/Peds_and_HPOs.RData")
load("~/shiny-server/Exomiser_BRC/results.RData")
save(all_peds, HPOs, file = "Peds_and_HPOs.RData")
load("~/shiny-server/Variant_explorer/Peds_and_HPOs.RData")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
variants_file <- gzfile("example_data/V2.004Int001.var2reg.vars.tsv.gz")
variants_df <- read.table(variants_file, header=T, sep="\t", stringsAsFactors = F)
variants_df$MaxPopAF[is.na(RV$variants_df$MaxPopAF)] <- 0
variants_df$MaxPopAF[is.na(variants_df$MaxPopAF)] <- 0
variants_df$cohortAF[is.na(variants_df$cohortAF)] <- 0
variants_df$Class <- "PASS"
tot_vars <- variants_df %>% select(Chr,Pos,Ref,Alt) %>% nrow()
tot_vars
PASS_counts <- c(
variants_df %>% filter(d_score >= 0.2) %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter((Reg_type == "splicing" & SpliceAI_SpliceAI_max >= 0) | Reg_type != "splicing") %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter(MaxPopAF <= 0.008) %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter(Consequence %in% c("missense")) %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter(cohortAF <= 1) %>% select(Chr,Pos,Ref,Alt) %>% nrow()
)
PASS_counts
filters_summ_vars <- data.frame(Filter=c("d score","SpliceAI","MaxPop AF","Consequence","cohort AF"),
PASS=PASS_counts,
FILTERED=(tot_vars-PASS_counts))
fitlers_summ_vars
filters_summ_vars
filters_summ_vars <- gather(RV$filters_summ_vars, key="Class", value="Count", PASS:FILTERED)
filters_summ_vars <- gather(filters_summ_vars, key="Class", value="Count", PASS:FILTERED)
filters_summ_vars
runApp()
runApp()
filters_summ_vars
str(filters_summ_vars)
runApp()
runApp()
ggplot(filters_summ_vars, aes(x=Filter,y=Count,fill=Class)) + geom_bar(stat="identity") + labs(y="N variants") + scale_y_sqrt() + theme(axis.text.x = element_text(angle=45, hjust=1))
filters_summ_vars
ggplot(filters_summ_vars, aes(x=Filter,y=Count,fill=Class)) + geom_bar(stat="identity") + labs(y="N variants") + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(filters_summ_vars, aes(x=Filter,y=Count,fill=Class)) + geom_bar(stat="identity") + labs(y="N variants") + theme(axis.text.x = element_text(angle=45, hjust=1)) + scale_y_log10()
runApp()
ggplot(filters_summ_vars, aes(x=Filter,y=Count,fill=Class)) + geom_bar(stat="identity") + labs(y="N variants") + theme(axis.text.x = element_text(angle=45, hjust=1))
ggplot(filters_summ_vars, aes(x=Filter,y=Count/1000,fill=Class)) + geom_bar(stat="identity") + labs(y="N variants") + theme(axis.text.x = element_text(angle=45, hjust=1))
tot_vars
runApp()
PASS_counts <- c(
variants_df %>% filter(d_score >= 0) %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter((Reg_type == "splicing" & SpliceAI_SpliceAI_max >= 0) | Reg_type != "splicing") %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter(MaxPopAF <= 0.005) %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter(Consequence %in% unique(Consequence) %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter(cohortAF <= 1) %>% select(Chr,Pos,Ref,Alt) %>% nrow()
)
)
PASS_counts <- c(
variants_df %>% filter(d_score >= 0) %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter((Reg_type == "splicing" & SpliceAI_SpliceAI_max >= 0) | Reg_type != "splicing") %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter(MaxPopAF <= 0.005) %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter(Consequence %in% unique(Consequence)) %>% select(Chr,Pos,Ref,Alt) %>% nrow(),
variants_df %>% filter(cohortAF <= 1) %>% select(Chr,Pos,Ref,Alt) %>% nrow()
)
PASS_counts
tot_vars <- variants_df %>% select(Chr,Pos,Ref,Alt) %>% nrow()
tot_vars
filters_summ_vars <- data.frame(Filter=c("d score","SpliceAI","MaxPop AF","Consequence","cohort AF"),
PASS=PASS_counts,
FILTERED=(tot_vars-PASS_counts))
filters_summ_vars
filters_summ_vars <- gather(filters_summ_vars, key="Class", value="Count", PASS:FILTERED)
ggplot(filters_summ_vars, aes(x=Filter,y=Count,fill=Class)) + geom_bar(stat="identity") + labs(y="N variants") + theme(axis.text.x = element_text(angle=45, hjust=1))
runApp()
variants_df %>% filter(DANN_DANN > 0.9)
variants_df %>% filter(DANN_DANN > 0.95)
variants_df %>% filter(DANN_DANN > 0.95) %>% nrow()
variants_df %>% filter(DANN_DANN > 0.95 & PanelApp ==1 ) %>% nrow()
variants_df %>% filter(DANN_DANN > 0.95 & PanelApp == 1) %>% nrow()
variants_df %>% filter(eval("DANN_DANN > 0.95 & PanelApp == 1")) %>% nrow()
subset(variants_df)
subset(variants_df, eval("DANN_DANN > 0.95 & PanelApp == 1"))
eval(To avoid that you spend time to come here just to discover that we are actually unable to access and copy the files you need, I suggest postponing the file transfer to Tuesday. I'm available all day, so let me know which time is more convenient for you.
Sorry for this delay. To avoid that you spend time to come here just to discover that we are actually unable to access and copy the files you need, I suggest postponing the file transfer to Tuesday. I'm available all day, so let me know which time is more convenient for you.
Sorry for this delay. To avoid that you spend time to come here just to discover that we are actually unable to access and copy the files you need, I suggest postponing the file transfer to Tuesday. I'm available all day, so let me know which time is more convenient for you.
Sorry for this delay. To avoid that you spend time to come here just to discover that we are actually unable to access and copy the files you need, I suggest postponing the file transfer to Tuesday. I'm available all day, so let me know which time is more convenient for you.
Sorry for this delay. To avoid that you spend time to come here just to discover that we are actually unable to access and copy the files you need, I suggest postponing the file transfer to Tuesday. I'm available all day, so let me know which time is more convenient for you.
Sorry for this delay. To avoid that you spend time to come here just to discover that we are actually unable to access and copy the files you need, I suggest postponing the file transfer to Tuesday. I'm available all day, so let me know which time is more convenient for you.
Sorry for this delay. To avoid that you spend time to come here just to discover that we are actually unable to access and copy the files you need, I suggest postponing the file transfer to Tuesday. I'm available all day, so let me know which time is more convenient for you.
Sorry for this delay. )
