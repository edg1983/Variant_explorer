plot_format1
)
ggplot(plot_df, aes(x=cum_SNPs/1000000, y=ts_tv)) + geom_line() +
labs(x="million SNPs (ordered by decreasing QUAL)",y="Ts/Tv ratio") +
scale_x_continuous(breaks = round(seq(min(plot_df$cum_SNPs/1000000),max(plot_df$cum_SNPs/1000000),1),1)) +
plot_format1
panel1 <- ggplot(plot_df, aes(x=quality, y=pct_SNPs)) + geom_line()  +
labs(x="QUAL",y="% SNPs (sites with QUAL \u2265 X)", title="%SNP by QUAL") +
scale_x_continuous(breaks = seq(0,1000,100)) +
plot_format1
panel2 <- ggplot(plot_df, aes(x=quality, y=pct_indels)) + geom_line() +
labs(x="QUAL",y="% indels (sites with QUAL \u2265 X)", title="%indels by QUAL") +
scale_x_continuous(breaks = seq(0,1000,100)) +
plot_format1
panel3 <- ggplot(plot_df, aes(x=quality, y=ts_tv)) + geom_line() +
geom_hline(yintercept = c(2,2.1), linetype="dashed") +
labs(x="QUAL",y="Ts/Tv (sites with QUAL \u2265 X)",title="Ts/Tv by QUAL") +
scale_x_continuous(breaks = seq(0,1000,100)) +
plot_format1
panel4 <- ggplot(plot_df, aes(x=cum_SNPs/1000000, y=ts_tv)) + geom_line() +
labs(x="million SNPs (ordered by decreasing QUAL)",y="Ts/Tv ratio",title="Ts/Tv vs N SNPs") +
scale_x_continuous(breaks = round(seq(min(plot_df$cum_SNPs/1000000),max(plot_df$cum_SNPs/1000000),1),1)) +
plot_format1
grid.arrange(panel1, panel2, panel3, panel4, ncol=1)
grid.arrange(panel1, panel2, panel3, panel4, ncol=2)
grid.arrange(panel1, panel2, panel3, panel4, nrow=2)
grid.arrange(panel1, panel3, panel2, panel4, ncol=2)
ggplot(plot_df, aes(x=quality,y=n_SNPs)) + geom_bar()
ggplot(plot_df, aes(x=quality,y=n_SNPs)) + geom_bar(stat="identity")
ggplot(plot_df, aes(x=quality,y=n_SNPs)) + geom_bar(stat="identity") + scale_y_sqrt()
ggplot(plot_df, aes(x=n_SNPs)) + geom_histogram() + scale_y_sqrt()
ggplot(plot_df, aes(x=quality)) + geom_histogram() + scale_y_sqrt()
ggplot(plot_df, aes(x=quality)) + geom_histogram() + scale_y_sqrt(bins=100)
ggplot(plot_df, aes(x=quality)) + geom_histogram(bins=100) + scale_y_sqrt()
ggplot(plot_df, aes(x=quality)) + geom_histogram(bins=10) + scale_y_sqrt()
ggplot(plot_df, aes(x=quality)) + geom_histogram(bins=50) + scale_y_sqrt()
ggplot(plot_df, aes(x=quality)) + geom_histogram(bins=1000) + scale_y_sqrt()
ggplot(plot_df, aes(x=quality)) + geom_histogram(bins=200) + scale_y_sqrt()
ggplot(plot_df, aes(x=quality,y=n_SNPs)) + geom_bar(stat="identity") + scale_y_sqrt()
qual_bin <- plot_df %>% group_by(G=trunc((2:n())/10)) %>% summarize(mean_qual=mean(quality), count_SNPs=sum(n_SNPs))
qual_bin <- plot_df %>% group_by(G=trunc(0:(n()-1)/10)) %>% summarize(mean_qual=mean(quality), count_SNPs=sum(n_SNPs))
ggplot(qual_bin, aes(x=mean_qual,y=count_SNPs)) + geom_bar(stat="identity") + scale_y_sqrt()
qual_bin <- plot_df %>% group_by(G=trunc(0:(n()-1)/20)) %>% summarize(mean_qual=mean(quality), count_SNPs=sum(n_SNPs))
ggplot(qual_bin, aes(x=mean_qual,y=count_SNPs)) + geom_bar(stat="identity") + scale_y_sqrt()
ggplot(plot_df, aes(x=quality,y=n_SNPs)) + geom_line() + scale_y_sqrt()
myplot <- arrangeGrob(panel1, panel3, panel2, panel4, ncol=2)
ggsave(myplot, file="QUAL_panel.png", height=8, width=8, dpi=150)
output_dir <- "VCF_plots"
head(vcf_stats[[d]]$DP)
d <- "deepvar"
for (d in vcf_stats) {
plot_df <- vcf_stats[[d]]$QUAL
#plot_df <- plot_df %>% mutate(
#  ts_tv = cumsum(n_transitions_1stALT) / cumsum(n_transversions_1stALT))
plot_df <- plot_df[order(plot_df$quality, decreasing = T),]
plot_df <- plot_df %>% mutate(
ts_tv = cumsum(n_transitions_1stALT) / cumsum(n_transversions_1stALT),
cum_SNPs = cumsum(n_SNPs),
cum_indels = cumsum(n_indels),
pct_SNPs = cum_SNPs / sum(n_SNPs),
pct_indels = cum_indels / sum(n_indels)
)
panel1 <- ggplot(plot_df, aes(x=quality, y=pct_SNPs)) + geom_line()  +
labs(x="QUAL",y="% SNPs (sites with QUAL \u2265 X)", title="%SNP by QUAL") +
scale_x_continuous(breaks = seq(0,1000,100)) +
plot_format1
panel2 <- ggplot(plot_df, aes(x=quality, y=pct_indels)) + geom_line() +
labs(x="QUAL",y="% indels (sites with QUAL \u2265 X)", title="%indels by QUAL") +
scale_x_continuous(breaks = seq(0,1000,100)) +
plot_format1
panel3 <- ggplot(plot_df, aes(x=quality, y=ts_tv)) + geom_line() +
geom_hline(yintercept = c(2,2.1), linetype="dashed") +
labs(x="QUAL",y="Ts/Tv (sites with QUAL \u2265 X)",title="Ts/Tv by QUAL") +
scale_x_continuous(breaks = seq(0,1000,100)) +
plot_format1
panel4 <- ggplot(plot_df, aes(x=cum_SNPs/1000000, y=ts_tv)) + geom_line() +
labs(x="million SNPs (decreasing QUAL)",y="Ts/Tv ratio",title="Ts/Tv vs N SNPs") +
scale_x_continuous(breaks = round(seq(min(plot_df$cum_SNPs/1000000),max(plot_df$cum_SNPs/1000000),1),1)) +
plot_format1
myplot <- arrangeGrob(panel1, panel3, panel2, panel4, ncol=2)
ggsave(myplot, file=paste0(output_dir, "/", d, "_QUAL_panel.png"), height=8, width=8, dpi=150)
}
head(vcf_stats[[d]]$DP)
head(vcf_stats$deepvar$DP)
ggplot(vcf_stats$deepvar$DP, aes(x=bin, y=pct_genotypes)) + geom_line()
summary(vcf_stats$deepvar$DP$bin)
tail(vcf_stats$deepvar$DP)
plot_df <- makePlotDF(vcf_stats, "DP")
head(plot_df)
plot_df$bin <- as.numeric(plot_df$bin)
ggplot(plot_df, aes(x=bin, y=pct_genotypes, color=dataset)) + geom_line()
plot_df[plot_df$bin == 0,]
plot_df$cumsum <- cumsum(plot_df$pct_genotypes)
ggplot(plot_df, aes(x=bin, y=cumsum, color=dataset)) + geom_line()
plot_df <- makePlotDF(vcf_stats, "DP")
plot_df %>% group_by(dataset) %>% mutate(cumsum=cumsum(pct_genotypes))
plot_df <- plot_df %>% group_by(dataset) %>% mutate(cumsum=cumsum(pct_genotypes))
ggplot(plot_df, aes(x=bin, y=cumsum, color=dataset)) + geom_line()
plot_df <- makePlotDF(vcf_stats, "DP")
plot_df$bin <- as.numeric(plot_df$bin)
plot_df <- plot_df %>% group_by(dataset) %>% mutate(cumsum=cumsum(pct_genotypes))
ggplot(plot_df, aes(x=bin, y=pct_genotypes, color=dataset)) + geom_line()
ggplot(plot_df, aes(x=bin, y=cumsum, color=dataset)) + geom_line()
ggplot(plot_df, aes(x=bin, y=pct_genotypes, color=dataset)) + geom_line() +
scale_x_continuous(limits=c(0,100), breaks=(seq(0,100,10))) +
scale_color_brewer(palette = "Set1") +
labs(x="Depth",y="% genotypes") +
plot_format1
ggplot(plot_df, aes(x=bin, y=pct_genotypes, color=dataset)) + geom_line() +
scale_x_continuous(limits=c(0,100), breaks=(seq(0,100,10))) +
scale_y_continuous(breaks=(seq(min(plot_df(pct_genotypes)),max(plot_df(pct_genotypes)),1))) +
scale_color_brewer(palette = "Set1") +
labs(x="Depth",y="% genotypes") +
plot_format1
ggplot(plot_df, aes(x=bin, y=pct_genotypes, color=dataset)) + geom_line() +
scale_x_continuous(limits=c(0,100), breaks=(seq(0,100,10))) +
scale_y_continuous(breaks=(seq(min(plot_df$pct_genotypes),max(plot_df$pct_genotypes),1))) +
scale_color_brewer(palette = "Set1") +
labs(x="Depth",y="% genotypes") +
plot_format1
ggplot(plot_df, aes(x=bin, y=pct_genotypes, color=dataset)) + geom_line() +
scale_x_continuous(limits=c(0,100), breaks=(seq(0,100,10))) +
scale_y_continuous(breaks=round((seq(min(plot_df$pct_genotypes),max(plot_df$pct_genotypes),1)))) +
scale_color_brewer(palette = "Set1") +
labs(x="Depth",y="% genotypes") +
plot_format1
ggplot(plot_df, aes(x=bin, y=pct_genotypes, color=dataset)) + geom_line() +
scale_x_continuous(limits=c(0,100), breaks=(seq(0,100,10))) +
scale_y_continuous(breaks=round((seq(min(plot_df$pct_genotypes),max(plot_df$pct_genotypes),1)),2)) +
scale_color_brewer(palette = "Set1") +
labs(x="Depth",y="% genotypes") +
plot_format1
ggplot(plot_df, aes(x=bin, y=cumsum, color=dataset)) + geom_line() +
scale_x_continuous(limits=c(0,100), breaks=(seq(0,100,10))) +
scale_y_continuous(breaks=round(seq(0,1,0.1))) +
scale_color_brewer(palette = "Set1") +
labs(x="Depth",y="cumulative % genotypes") +
plot_format1
ggplot(plot_df, aes(x=bin, y=cumsum, color=dataset)) + geom_line() +
scale_x_continuous(limits=c(0,100), breaks=(seq(0,100,10))) +
scale_y_continuous(breaks=round(seq(0,100,10))) +
scale_color_brewer(palette = "Set1") +
labs(x="Depth",y="cumulative % genotypes") +
plot_format1
outFilename <- function(prefix, suffix, ext, output_dir=output_dir) {
filename <- paste0(output_dir, "/", prefix, "_", suffix, ".", ext)
return(filename)
}
panel1 <- ggplot(plot_df, aes(x=bin, y=pct_genotypes, color=dataset)) + geom_line() +
scale_x_continuous(limits=c(0,100), breaks=(seq(0,100,10))) +
scale_y_continuous(breaks=round((seq(min(plot_df$pct_genotypes),max(plot_df$pct_genotypes),1)),2)) +
scale_color_brewer(palette = "Set1") +
labs(x="Depth",y="% genotypes") +
plot_format1
panel2 <- ggplot(plot_df, aes(x=bin, y=cumsum, color=dataset)) + geom_line() +
scale_x_continuous(limits=c(0,100), breaks=(seq(0,100,10))) +
scale_y_continuous(breaks=round(seq(0,100,10))) +
scale_color_brewer(palette = "Set1") +
labs(x="Depth",y="cumulative % genotypes") +
plot_format1
myplot <- arrangeGrob(panel1,panel2,nrow=2)
ggsave(myplot, file=outFilename(d,"DP_panel","png"), device="png", height=10, width=6, dpi=150)
outFilename <- function(prefix, suffix, ext, output_path=output_dir) {
filename <- paste0(output_path, "/", prefix, "_", suffix, ".", ext)
return(filename)
}
ggsave(myplot, file=outFilename(d,"DP_panel","png"), device="png", height=10, width=6, dpi=150)
outFilename(d,"DP_panel","png")
d
ggsave(myplot, file=outFilename("","DP_panel","png"), device="png", height=10, width=6, dpi=150)
ggsave(myplot, file=outFilename("","DP_panel","png"), device="png", height=9, width=6, dpi=150)
plot_df <- makePlotDF(vcf_stats, "AF")
head(plot_df)
plot_df <- plot_df %>% group_by(dataset) %>% mutate(cumsum_snp=cumsum(n_SNPs), cumsum_indel=cumsum(n_indels))
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp, color=dataset)) + geom_line(])
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp, color=dataset)) + geom_line()
plot_df <- makePlotDF(vcf_stats, "AF")
plot_df <- plot_df[order(plot_df$Allele_freq, decreasing=T),]
plot_df <- plot_df %>% group_by(dataset) %>% mutate(cumsum_snp=cumsum(n_SNPs), cumsum_indel=cumsum(n_indels))
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp, color=dataset)) + geom_line()
plot_df <- makePlotDF(vcf_stats, "AF")
plot_df <- plot_df %>% group_by(dataset) %>% mutate(cumsum_snp=cumsum(n_SNPs), cumsum_indel=cumsum(n_indels))
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp, color=dataset)) + geom_bar(stat="identity")
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp, fill=dataset)) + geom_bar(stat="identity")
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp, fill=dataset)) + geom_histogram(stat="identity")
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp)) + geom_histogram(stat="identity")
ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity")
head(plot_df)
ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity") + scale_y_sqrt()
ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_histogram(stat="identity") + scale_y_sqrt()
ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs/1000000, fill=dataset)) + geom_bar(stat="identity") + scale_y_sqrt()
ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs/1000000, fill=dataset)) + geom_bar(stat="identity", bins=100) + scale_y_sqrt()
ggplot(plot_df[plot_df$Allele_freq > 0,], aes(x=Allele_freq, y=n_SNPs/1000000, fill=dataset)) + geom_bar(stat="identity", bins=100) + scale_y_sqrt()
ggplot(plot_df[plot_df$Allele_freq > 0,], aes(x=Allele_freq, y=n_SNPs/1000000, fill=dataset)) + geom_bar(stat="identity", bins=100) + scale_y_log10()
ggplot(plot_df[plot_df$Allele_freq > 0,], aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity", bins=100) + scale_y_log10()
ggplot(plot_df[plot_df$Allele_freq > 0,], aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity", position=position_dodge(0.9)) + scale_y_log10()
ggplot(plot_df[plot_df$Allele_freq > 0,], aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity") + scale_y_log10() + facet_wrap(~dataset)
ggplot(plot_df[plot_df$Allele_freq > 0,], aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity") + scale_y_log10() + facet_wrap(~dataset) + plot_format1
ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity") + scale_y_log10() + facet_wrap(~dataset) + plot_format1
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp, color=dataset)) + geom_line()
ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity") +
scale_y_log10() + facet_wrap(~dataset) +
labs(x="dataset AF", y="N SNPs (log10)")
plot_format1
ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity") +
scale_y_log10() + facet_wrap(~dataset) +
labs(x="dataset AF", y="N SNPs (log10)") +
plot_format1
ggplot(plot_df, aes(x=Allele_freq, y=n_indels, fill=dataset)) + geom_bar(stat="identity") +
scale_y_log10() + facet_wrap(~dataset) +
labs(x="dataset AF", y="N indels (log10)") +
plot_format1
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp, color=dataset)) + geom_line()
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp/1000000, color=dataset)) + geom_line()
ggplot(plot_df, aes(x=Allele_freq, y=cumsum_indel/1000000, color=dataset)) + geom_line() +
labs(x="dataset AF", y="million INDELs") +
plot_format1
panel1 <- ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity") +
scale_y_log10() + facet_wrap(~dataset) +
labs(x="dataset AF", y="N SNPs (log10)") +
plot_format1
panel2 <- ggplot(plot_df, aes(x=Allele_freq, y=n_indels, fill=dataset)) + geom_bar(stat="identity") +
scale_y_log10() + facet_wrap(~dataset) +
labs(x="dataset AF", y="N indels (log10)") +
plot_format1
myplot <- arrangeGrob(panel1, panel2, nrow=2)
ggsave(myplot, filename = outFilename("","AF_distribution","png"), width=6, height=8, dpi=150)
ggsave(myplot, filename = outFilename("","AF_distribution","png"), width=8, height=8, dpi=150)
ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity") +
scale_y_log10() + facet_wrap(~dataset) +
labs(x="dataset AF", y="N SNPs (log10)", title="SNPs AF distribution") +
plot_format1
panel1 <- ggplot(plot_df, aes(x=Allele_freq, y=n_SNPs, fill=dataset)) + geom_bar(stat="identity") +
scale_y_log10() + facet_wrap(~dataset) +
labs(x="dataset AF", y="N SNPs (log10)", title="SNPs AF distribution") +
plot_format1
panel2 <- ggplot(plot_df, aes(x=Allele_freq, y=n_indels, fill=dataset)) + geom_bar(stat="identity") +
scale_y_log10() + facet_wrap(~dataset, ) +
labs(x="dataset AF", y="N indels (log10)", title="INDELs AF distribution") +
plot_format1
myplot <- arrangeGrob(panel1, panel2, nrow=2)
ggsave(myplot, filename = outFilename("","AF_distribution","png"), width=8, height=8, dpi=150)
panel1 <- ggplot(plot_df, aes(x=Allele_freq, y=cumsum_snp/1000000, color=dataset)) + geom_line() +
labs(x="dataset AF", y="million SNPs") +
plot_format1
panel2 <- ggplot(plot_df, aes(x=Allele_freq, y=cumsum_indel/1000000, color=dataset)) + geom_line() +
labs(x="dataset AF", y="million INDELs") +
plot_format1
myplot <- arrangeGrob(panel1, panel2, nrow=2)
ggsave(myplot, filename = outFilename("","AF_cumsum","png"), width=8, height=8, dpi=150)
ggsave(myplot, filename = outFilename("","AF_cumsum","png"), width=6, height=8, dpi=150)
outFilename <- function(name, ext, prefix=NULL, output_path=output_dir) {
if (!is.null(prefix)) {
basename=paste0(prefix, "_", suffix)
} else {
basename=name
}
filename <- paste0(output_path, "/", basename, ".", ext)
return(filename)
}
plot_df <- makePlotDF(vcf_stats, "HWE")
head(plot_df)
ggplot(plot_df, aes(x=1st_ALT_AF, y=median, ymin=25th_percentile, ymax=75th_precentile)) + geom_line()
ggplot(plot_df, aes(x=1st_ALT_AF, y=median, ymin=`25th_percentile`, ymax=`75th_precentile`)) + geom_line()
ggplot(plot_df, aes(x=`1st_ALT_AF`, y=median, ymin=`25th_percentile`, ymax=`75th_precentile`)) + geom_line()
colnames(plot_df)
colnames(plto_df) <- c("HWE","id","AF","n_obs","perc_25","median","perf_75","dataset")
colnames(plot_df) <- c("HWE","id","AF","n_obs","perc_25","median","perf_75","dataset")
ggplot(plot_df, aes(x=AF, y=median, ymin=perc_25, ymax=perc_75)) + geom_line()
ggplot(plot_df, aes(x=AF, y=median)) + geom_line()
ggplot(plot_df, aes(x=AF, y=median, color=dataset)) + geom_line()
ggplot(plot_df, aes(x=AF, y=median, color=dataset)) + geom_smooth()
colnames(plot_df) <- c("HWE","id","AF","n_obs","perc_25","median","perc_75","dataset")
ggplot(plot_df, aes(x=AF, y=median, color=dataset)) + geom_smooth(stat="identity", aes(ymin=perc_25, ymax=perc_75))
ggplot(plot_df, aes(x=AF, y=median, color=dataset)) + geom_smooth(aes(ymin=perc_25, ymax=perc_75))
ggplot(plot_df, aes(x=AF, y=median, color=dataset)) + geom_smooth(stat="lm", aes(ymin=perc_25, ymax=perc_75))
ggplot(plot_df, aes(x=AF, y=median, color=dataset)) + geom_smooth(stat="identity", aes(ymin=perc_25, ymax=perc_75))
ggplot(plot_df, aes(x=AF, y=median, color=dataset)) + geom_line(aes(ymin=perc_25, ymax=perc_75))
ggplot(plot_df, aes(x=AF, y=median, color=dataset)) + geom_smooth(aes(ymin=perc_25, ymax=perc_75))
View(plot_df)
ggplot(plot_df, aes(x=AF, y=median, color=dataset)) + geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75))
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) + geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75))
(0.04^2 + 0.96^2) / 2
(0.04^2 + 0.96^2)
(0.04 * 0.96) / 2
(0.04 * 0.96) * 2
plot_df$HWE <- (plot_df$AF * (1-plot_df$AF)) * 2
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) + geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) + facet_wrap(~dataset)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) + geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) + geom_line(aes(x=AF, y=HWE)) + facet_wrap(~dataset)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) + geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) + geom_line(aes(x=AF, y=HWE, color="black")) + facet_wrap(~dataset)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) + geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) + geom_line(aes(x=AF, y=HWE), linetype="dashed") + facet_wrap(~dataset)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) + geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) + geom_line(aes(x=AF, y=HWE), linetype="dashed") + lims(y=c(0,0.75) + facet_wrap(~dataset)
)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) + geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) + geom_line(aes(x=AF, y=HWE), linetype="dashed") + lims(y=c(0,0.75)) + facet_wrap(~dataset)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) + geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) + geom_line(aes(x=AF, y=HWE), linetype="dashed") + lims(y=c(0,0.6)) + facet_wrap(~dataset)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) +
geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) +
geom_line(aes(x=AF, y=HWE), linetype="dashed", size=2) +
lims(y=c(0,0.6)) + facet_wrap(~dataset)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) +
geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) +
geom_line(aes(x=AF, y=HWE), linetype="smalldashed", size=2) +
lims(y=c(0,0.6)) + facet_wrap(~dataset)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) +
geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) +
geom_line(aes(x=AF, y=HWE), linetype="dashed", size=1.5) +
lims(y=c(0,0.6)) + facet_wrap(~dataset)
ggplot(plot_df, aes(x=AF, y=median, color=dataset, fill=dataset)) +
geom_smooth(stat="identity",aes(ymin=perc_25, ymax=perc_75)) +
geom_line(aes(x=AF, y=HWE), linetype="dashed", size=1) +
lims(y=c(0,0.6)) + facet_wrap(~dataset)
shiny::runApp('github.com/Variant_explorer')
runApp('github.com/Variant_explorer')
library(shiny)
PanelApp_index <- read.delim("~/github.com/Variant_explorer/Resources/PanelApp_index.tsv", stringsAsFactors=FALSE)
View(PanelApp_index)
shiny::runApp('github.com/Variant_explorer')
setwd("~/github.com/Variant_explorer")
shiny::runApp()
runApp()
regions <- "0_sil"
regions_query <- paste("\'", regions,"\'", collapse=",", sep="")
query = paste0("SELECT r.regionID, r.chromosome, r.start, r.stop, \
r.type, r.std_type, r.DB_source, r.PhyloP100_median, r.constrain_pct, \
GROUP_CONCAT(DISTINCT g.gene_symbol) AS controlled_genes, \
r.closestGene_symbol, r.closestGene_ensg, r.closestGene_dist, \
GROUP_CONCAT(DISTINCT t.cell_or_tissue) AS cell_or_tissue, \
GROUP_CONCAT(DISTINCT m.method) AS detection_method, \
GROUP_CONCAT(DISTINCT p.phenotype) AS phenotypes \
FROM GRCh38_Regions AS r \
LEFT JOIN tissues AS t ON r.regionID = t.regionID \
LEFT JOIN genes AS g ON r.regionID = g.regionID \
LEFT JOIN methods AS m ON r.regionID = m.regionID \
LEFT JOIN phenos AS p ON r.regionID = p.regionID \
WHERE r.regionID IN (",regions_query, ") \
GROUP BY r.regionID")
regions_df <- dbGetQuery(conn, query)
conn <- dbConnect(RSQLite::SQLite(), db)
db <- "Resources/RegulatoryRegions.db"
conn <- dbConnect(RSQLite::SQLite(), db)
regions_df <- dbGetQuery(conn, query)
query = paste0("SELECT r.regionID AS regionID, \
t.chromosome, t.start, t.stop, t.name, \
tt.cell_or_tissue AS cell_or_tissue \
FROM GRCh38_Regions AS r \
INNER JOIN GRCh38_regionID_to_TFBS AS link ON r.regionID = link.regionID \
INNER JOIN GRCh38_TFBS AS t ON link.link_ID = t.regionID \
INNER JOIN GRCh38_TFBS_tissues AS tt ON t.regionID = tt.regionID \
WHERE r.regionID IN (",regions_query, ")")
TFBS_details_df <- dbGetQuery(conn, query)
regions_plot <- regions_df[,c("chromosome","start","stop","regionID","cell_or_tissue")]
colnames(regions_plot)[4] <- "name"
plot_df <- rbind(TFBS_details_df %>% select(chromosome,start,stop,name,cell_or_tissue) %>% mutate(group=paste0("TFBS - ",name)),
regions_plot %>% mutate(group="region"))
plot_df
ggplot(plot_df, aes(ymin=start, ymax=stop, x=group, colour=cell_or_tissue, label=name, group=rownames(plot_df))) +
geom_linerange(size=1, position=position_dodge(1)) +
geom_text(data=plot_df %>% filter(group=="region"), aes(y=start+(stop-start)/2), position=position_dodge(1)) +
geom_hline(yintercept = var_position, linetype="dashed") +
labs(y=paste0(unique(plot_df$chromosome), " genomic position"), x="") +
coord_flip() +
theme(axis.text.y = element_text(size=10), axis.text.x=element_text(angle=45, hjust=1), legend.position = "none")
var_position <- 99559800
ggplot(plot_df, aes(ymin=start, ymax=stop, x=group, colour=cell_or_tissue, label=name, group=rownames(plot_df))) +
geom_linerange(size=1, position=position_dodge(1)) +
geom_text(data=plot_df %>% filter(group=="region"), aes(y=start+(stop-start)/2), position=position_dodge(1)) +
geom_hline(yintercept = var_position, linetype="dashed") +
labs(y=paste0(unique(plot_df$chromosome), " genomic position"), x="") +
coord_flip() +
theme(axis.text.y = element_text(size=10), axis.text.x=element_text(angle=45, hjust=1), legend.position = "none")
ggplot(plot_df, aes(ymin=start, ymax=stop, x=group, colour=cell_or_tissue, label=name)) +
geom_linerange(size=1, position=position_dodge(1)) +
geom_text(data=plot_df %>% filter(group=="region"), aes(y=start+(stop-start)/2), position=position_dodge(1)) +
geom_hline(yintercept = var_position, linetype="dashed") +
labs(y=paste0(unique(plot_df$chromosome), " genomic position"), x="") +
coord_flip() +
theme(axis.text.y = element_text(size=10), axis.text.x=element_text(angle=45, hjust=1), legend.position = "none")
runApp()
runApp()
runApp()
install.packages(c("doParallel","foreach"))
library(doParallel)
library(foreach)
completed <- 0
pb <- txtProgressBar(min=1, max=total,style=3)
total = 10
processing_results <- foreach (n = 1:total, .combine=rbind, .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
return(c(sqrt_val,multi_val))
completed <- completed + 1
setTxtProgressBar(pb, completed)
}
processing_results
registerDoParallel(4)
monitorProgress <- function(pb, ...) {
completed <- length(list(...))
setTxtProgressBar(pb,completed)
rbind(...)
}
processing_results <- foreach (n = 1:total, .init=pb, .combine=monitorProgress(), .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(10)
return(c(sqrt_val,multi_val))
}
processing_results <- foreach (n = 1:total, .init=pb, .combine=monitorProgress(), .multicombine = T, .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(10)
return(c(sqrt_val,multi_val))
}
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .multicombine = T, .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(10)
return(c(sqrt_val,multi_val))
}
pb <- txtProgressBar(min=1, max=total,style=3)
processing_results <- foreach (n = 1:total, .init=pb, .combine=monitorProgress(), .multicombine = T, .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(10)
return(c(sqrt_val,multi_val))
}
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .multicombine = T, .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(10)
return(c(sqrt_val,multi_val))
}
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(10)
return(c(sqrt_val,multi_val))
}
processing_results
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(10)
return(c(sqrt_val,multi_val))
}
monitorProgress <- function() {
pb <- txtProgressBar(min=1, max=total,style=3)
count <- 0
function(...) {
count <<- count + length(list(...))
setTxtProgressBar(pb,count)
Sys.sleep(0.01)
flush.console()
rbind(...)
}
}
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .multicombine = T, .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(10)
return(c(sqrt_val,multi_val))
}
processing_results
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(10)
return(c(sqrt_val,multi_val))
}
sample(10,1)
sample(10,1)
sample(10,1)
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(sample(10,1))
return(c(sqrt_val,multi_val))
}
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(sample(30,1))
return(c(sqrt_val,multi_val))
}
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .multicombine = T, .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(sample(30,1))
return(c(sqrt_val,multi_val))
}
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .multicombine = T, .maxcombine = 5, .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(sample(30,1))
return(c(sqrt_val,multi_val))
}
total <- 1000
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
Sys.sleep(sample(10,1))
return(c(sqrt_val,multi_val))
}
processing_results <- foreach (n = 1:total, .combine=monitorProgress(), .inorder=F) %dopar% {
sqrt_val <- sqrt(n)
multi_val <- n * 10
#Sys.sleep(sample(10,1))
return(c(sqrt_val,multi_val))
}
processing_results
head(processing_results)
str(processing_results)
sum(processing_results[,1])
